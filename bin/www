#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("instagram-api:server");
var http = require("http");
var { Message } = require("../models/Message");
var { Chat } = require("../models/Chat");
var { ChatUser } = require("../models/ChatUser");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "4000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var socketio = require("socket.io");
/**
 * Listen on provided port, on all network interfaces.
 */
const io = socketio(server, {
  cors: {
    origin: "*",
  },
});
var counter = 0;
io.on("connection", (socket) => {
  console.log("we have a new connection");

  socket.on("newMessage", async (data) => {
    console.log("neww message arrived");
    try {
      var chat = await Chat.findById(data.chatId);
      if (chat) {
        let message = new Message();
        message.message = data.newMessage;
        message.user = data.chatUserId;
        message.chat = data.chatId;
        message.save((err, doc) => {
          return io.emit("messageSaved", doc);
        });
      } else {
        var chat = new Chat();

        chat.save((err, doc) => {
          let chatUser = new ChatUser();
          chatUser.user = data.chatUserId;
          chatUser.chat = doc._id;

          let chatUser2 = new ChatUser();
          chatUser2.user = data.loggedInUserId;
          chatUser2.chat = doc._id;

          let message = new Message();
          message.message = data.newMessage;
          message.user = data.chatUserId;
          message.chat = doc._id;

          chatUser.save();
          chatUser2.save();
          message.save((err, doc) => {
            return io.emit("messageSaved", doc);
          });
        });
      }
    } catch (err) {
      console.log(err);
    }
  });

  socket.on("disconnect", () => {
    console.log("user left");
  });
});
server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
